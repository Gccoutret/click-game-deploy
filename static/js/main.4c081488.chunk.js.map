{"version":3,"sources":["components/geneCard.js/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["geneCard","props","className","onClick","clickCard","id","randomize","src","image","alt","style","width","height","Wrapper","children","App","state","genewilders","score","highScore","clickGene","console","log","map","genewilder","clicked","setState","resetGame","currentScore","i","length","j","Math","floor","random","images","this","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqCAkBeA,MAZf,SAAkBC,GAChB,OAEI,yBAAKC,UAAU,iBACf,0BAAMC,QAAS,WAAOF,EAAMG,UAAUH,EAAMI,IAAKJ,EAAMK,cACtD,yBAAKC,IAAKN,EAAMO,MAAON,UAAU,YAAYO,IAAI,aAAaC,MAAO,CAACC,MAAO,QAASC,OAAQ,c,qBCJtFC,MAJf,SAAiBZ,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMa,WCsG1BC,E,2MAjGbC,MAAO,CACLC,cACAC,MAAM,EACNC,UAAU,G,EAGZC,UAAY,SAACf,GACXgB,QAAQC,IAAIjB,GACZ,IAAMY,EAAc,EAAKD,MAAMC,YAAYM,KAAI,SAAAC,GAC7C,GAAGA,EAAWnB,KAAOA,IAA6B,IAAvBmB,EAAWC,QAChC,EAAKT,MAAME,MAAQ,EAAKF,MAAMG,WAChC,EAAKO,SAAS,CAAEP,UAAW,EAAKH,MAAME,QAExC,EAAKS,iBACA,GAAIH,EAAWnB,KAAOA,IAA6B,IAAvBmB,EAAWC,QAAkB,CAC9D,IAAIG,EAAe,EAAKZ,MAAME,MAC9BM,EAAWC,SAAU,EACrB,EAAKC,SAAS,CAACR,MAAOU,EAAe,IAGvC,OADAP,QAAQC,IAAIM,GACLJ,KAET,EAAKE,SAAS,CAACT,iB,EAyBjBX,UAAY,WACV,IAAK,IAAIuB,EAAI,EAAKb,MAAMC,YAAYa,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1D,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADgB,EAED,CAAC,EAAKb,MAAMC,YAAYc,GAAI,EAAKf,MAAMC,YAAYY,IAA3G,EAAKb,MAAMC,YAAYY,GAFkC,KAE9B,EAAKb,MAAMC,YAAYc,GAFO,KAI5D,EAAKL,SAAS,CAACT,iB,EAGjBU,UAAY,WACV,EAAKD,SAAS,CACZR,MAAO,EACPiB,OAAQ,EAAK7B,UAAU,EAAKU,MAAMC,gB,wEAI5B,IAAD,OACP,OACE,6BACA,yBAAKf,UAAU,kBACf,wBAAIA,UAAU,SAAd,UAA8BkC,KAAKpB,MAAME,MAAzC,OACA,wBAAIhB,UAAU,SAAd,eAAmCkC,KAAKpB,MAAMG,YAG9C,kBAAC,EAAD,KACGiB,KAAKpB,MAAMC,YAAYM,KAAI,SAAAf,GAAK,OAC/B,kBAAC,EAAD,CACEA,MAAOA,EAAMA,MACbJ,UAAW,EAAKgB,UAChBK,QAAS,EAAKT,MAAMC,YAAYQ,QAChCnB,UAAW,EAAKA,UAChBD,GAAIG,EAAMH,GACVgC,IAAK7B,EAAMH,c,GAhFLiC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c081488.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\n\nfunction geneCard(props) {\n  return (\n \n      <div className=\"img-container\">\n      <span onClick={() => {props.clickCard(props.id); props.randomize()}}>\n       <img src={props.image} className=\"img-fluid\" alt=\"Responsive\" style={{width: \"300px\", height: \"250px\"}}/>\n      </span>\n    </div>\n  \n  );\n}\n\nexport default geneCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport GeneCard from './components/geneCard.js'\nimport './App.css';\nimport genewilders from './genewilder.json';\nimport Wrapper from './components/Wrapper'\n\n\nclass App extends React.Component {\n\n  state= {\n    genewilders,\n    score:0,\n    highScore:0,\n  }\n\n  clickGene = (id) => {\n    console.log(id);\n    const genewilders = this.state.genewilders.map(genewilder => {\n      if(genewilder.id === id && genewilder.clicked === true){\n        if (this.state.score > this.state.highScore) {\n          this.setState({ highScore: this.state.score });\n        }\n        this.resetGame();\n      } else if (genewilder.id === id && genewilder.clicked === false){\n        var currentScore = this.state.score;\n        genewilder.clicked = true;\n        this.setState({score: currentScore + 1});\n      }\n      console.log(currentScore)\n      return genewilder;\n    })\n    this.setState({genewilders});\n  }\n  \n\n  // clickGene = (id) => {\n  //   const genewilders = this.state.genewilders.map(genewilders=> {\n\n  //   })\n  //   if(clicked){\n  //     if(this.state.score > this.state.highScore){\n  //       this.setState({highScore: this.state.score});\n  //     }\n  //   } else{\n  //     var updateScore = this.state.score;\n  //     this.setState({\n  //       score: updateScore+1,\n\n  //       genewilders: this.randomize(this.state.genewilders)\n  //     });\n  //   }console.log(this.state.clicked)\n  //   console.log(this.state.score)\n  // }\n  \n\n\n  randomize = () => {\n    for (let i = this.state.genewilders.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.state.genewilders[i], this.state.genewilders[j]] = [this.state.genewilders[j], this.state.genewilders[i]];\n    }\n    this.setState({genewilders});\n  }\n  \n  resetGame = () => {\n    this.setState({\n      score: 0,\n      images: this.randomize(this.state.genewilders)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"scoreContainer\">\n      <h3 className=\"score\">Score: {this.state.score}/12</h3>\n      <h3 className=\"score\">High Score: {this.state.highScore}</h3>\n      </div>\n      \n      <Wrapper>\n        {this.state.genewilders.map(image => (\n          <GeneCard \n            image={image.image}\n            clickCard={this.clickGene}\n            clicked={this.state.genewilders.clicked}\n            randomize={this.randomize}\n            id={image.id}\n            key={image.id}\n          />\n        ))\n        }\n        </Wrapper>\n        </div>\n        \n    \n      );\n    };\n      \n    \n    \n  \n}\n\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}